before_CAG_repeats[i]<-unique(data[[before_infl_pt_id[i]]]$CAG)
}
first_visit_to_diagnose<-rep(100, n)
for (i in 1:n){
first_visit_to_diagnose[i]<-which(data[[i]]$YEARS_TO_DIAG==0)[1]
}
#plot(data[[later_infl_pt_id[13]]]$logAGE, data[[later_infl_pt_id[13]]]$TOTAL_MOTOR_SCORE)
num.early.diag<-sum(ages[,"ind"])
percent.early.diag<-num.early.diag/n
return(list(ages=ages, num.early.diag=num.early.diag,  percent.early.diag= percent.early.diag, later_CAG_repeats=later_CAG_repeats, before_CAG_repeats=before_CAG_repeats, first_visit_to_diagnose=first_visit_to_diagnose))
}
shch.early.diag<-how.many.early.diag(n=80,data=shch.results$suborg, estimation=shch.results$zstar)
cbind(shch.early.diag$age, shch.early.diag$first_visit_to_diagnose)
shch.early.diag.stat<-cbind(shch.early.diag$num.early.diag,shch.early.diag$percent.early.diag)
#boxplot(shch.early.diag$later_CAG_repeats, shch.early.diag$before_CAG_repeats, names=c("later_CAG_repeats", "before_CAG_repeats"))
shch.early.diag.stat
logistf <- function(theta1,theta2,theta3,logS){
denom <- 1+exp(-theta3*(logS-theta2))
denom2 <- denom*denom
f1 <- theta1/denom
qfunc <- f1
return(qfunc)
#  analytical dervivatives
qgrad <- array(0,c(length(logS),3),list(NULL,c("theta1","theta2","theta3")))
qgrad[,"theta1"] <- (1/denom)
qgrad[,"theta2"] <- -(theta3*theta1*(denom-1)/denom2)
qgrad[,"theta3"] <- ((logS-theta2)*(theta1)*(denom-1)/denom2)
attr(qfunc,"gradient") <- qgrad
}
##################
grouped.tms.data<-function(file="data/gendat.csv", m=30,n=80){
##############################################
# observed motor diagnosis : 129 subjects
##############################################
obsdata<-read.csv(file=file, header=TRUE)[,-1]
##obsdata[1:10,]
obsID<-unique(obsdata$SUBJID)
obsnum<-length(obsID)
##################################################################################
## how many visits individuals were made in HD study : choose subset of subjects
##                                                     who made at least 5 visits.
##################################################################################
#num.visit<-rep(100,obsnum)
#for(i in 1:length(obsID)){
#######################
#   Individual data   #
#######################
#  visitnum<-length(which(obsdata$SUBJID==obsID[i]))
#  num.visit[i]<-visitnum
#}
## Exclude visit numbers are less than 4
#less.visit.id<-which(num.visit<=4)
#many.visit.subID<-obsID[-less.visit.id]
##################################################################################
## List format of observed data who made at least 5 visits   #####################
##################################################################################
suborg<-vector("list", length(obsID))
base.cov <-matrix(100,nrow=length(obsID), ncol=7,
dimnames=list(paste("ID",1:length(obsID),sep=""),
c("baseage", "CAG", "gender","SDMT","SC","SW","SI")))
for(i in 1:length(obsID)){
#i<-1; rm(i)
#######################
#   Individual data   #
#######################
### From observed data, only consider the subjects who made more than 4 visit numbers.
subind<-which(obsdata$SUBJID==obsID[i])
subdata<-obsdata[subind,]
subdata$logAGE<-log(subdata$AGE)
base<-subdata[subdata$EVENT==101,]
base.cov[i,1]<-base$logAGE
base.cov[i,2]<-base$CAG
base.cov[i,3]<-base$gender
base.cov[i,4]<-base$SDMT
base.cov[i,5]<-base$STROOP_COLOR
base.cov[i,6]<-base$STROOP_WORD
base.cov[i,7]<-base$STROOP_INTERFERENCE
subdata$stdardized.TMS<-(subdata$TOTAL_MOTOR_SCORE-mean(subdata$TOTAL_MOTOR_SCORE))/sd(subdata$TOTAL_MOTOR_SCORE)
### save original data ##
suborg[[i]]<-subdata
}
#########################
# STANDARDIZED CAG   ####
#########################
stdardized.age<-(base.cov[,"baseage"]-mean(base.cov[,"baseage"]))/sd(base.cov[,"baseage"])
stdardized.CAG<-(base.cov[,"CAG"]-mean(base.cov[,"CAG"]))/sd(base.cov[,"CAG"])
stdardized.SDMT<-(base.cov[,"SDMT"]-mean(base.cov[,"SDMT"]))/sd(base.cov[,"SDMT"])
stdardized.SC<-(base.cov[,"SC"]-mean(base.cov[,"SC"]))/sd(base.cov[,"SC"])
stdardized.SW<-(base.cov[,"SW"]-mean(base.cov[,"SW"]))/sd(base.cov[,"SW"])
stdardized.SI<-(base.cov[,"SI"]-mean(base.cov[,"SI"]))/sd(base.cov[,"SI"])
for(i in 1:length(obsID)){
#i<-1; rm(i)
ll<-dim(suborg[[i]])[1]
suborg[[i]]$stdz_bage<-rep(as.numeric(stdardized.age[i]),ll)
suborg[[i]]$stdz_CAG<-rep(as.numeric(stdardized.CAG[i]),ll)
suborg[[i]]$stdz_SDMT<-rep(as.numeric(stdardized.SDMT[i]),ll)
suborg[[i]]$stdz_SC<-rep(as.numeric(stdardized.SC[i]),ll)
suborg[[i]]$stdz_SW<-rep(as.numeric(stdardized.SW[i]),ll)
suborg[[i]]$stdz_SI<-rep(as.numeric(stdardized.SI[i]),ll)
}
## create data.frame from list type of data
gendat<-do.call("rbind.data.frame", suborg)
## Create grouped Data
newgrdata<-groupedData(TOTAL_MOTOR_SCORE~logAGE|SUBJID/gender, data=gendat, order.groups=FALSE)
#write.csv(newgrdata, file="newgrdata.csv")
###################################################################################################################################################
## Fit nonlinear mixed model using nlme() in NLME package to estimate fixed effects and random effects
## in longitudinal model, which assumped nonlinear logistic function
## tms: longitudinal response vector for a subject i and jth visit.
## logistf: nonlinear model that data follow. This function is defined in logistf().
## theta1: fixed effect. parametrized in logistf
## theta2: log transformed inflection points, which is modeled by linear relationship with
##         subject specific covariate W.cov, containig fixed effect beta and random effects u
##         We do not assume there is constant term.
## logS: main covariate in the logitudinal model
## model: tms ~logistf(theta1, theta2,  logS)
## fixed: two sided linear model in the form of f1~x1, where f1: names of parameters, x1: covariates in the linear relationship with f1
##       eg. theat1 ~1
## random: two sided formula in the form of r1~x1, where r1: names of parameters, x1 specifies the random effects model for the parameter r1
## groups: ~g1 or ~g1/g2../gQ, specify the partitions of the data over which the random effects vary
## start: list of initial estimates for the fixed effects and random effects, eg. theta1=5, W.COV=2.2
## method: "REML" or "ML", modle is fit by maximizing the restricted log liklihood or log-likelihood.
## verbose: TRUE means information on the evoluation of the interative algorithm is printed. Default is FALSE.
###################################################################################################################################################
## sort/average: sort the data according to the x variable and obtain the average repose y for each unique x
#asymptote: max y as initial value phi
#inflection points: use the x according to 0.5 *phi   phi2
#scale: use the difference between x corresponding 0.75*phi and phi2
#0.75*63-63*0.5
#con<-nls.control(maxiter = 100)
#, tol = 1e-1, minFactor = 1/10,
#printEval = FALSE, warnOnly = FALSE)
#max(newgrdata$stdardized.TMS)
#max(newgrdata$stdardized.TMS)*0.5
#max(newgrdata$stdardized.TMS)*0.75-1
#tms.nlme1<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_CAG, theta3~1) , random=pdDiag(theta1+theta2+theta3~1),
#                data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63,3.3,0,1.6)), method="ML", verbose=TRUE, na.action=na.omit )
#tms.nlme2<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_CAG+gender, theta3~1) , random=pdDiag(theta1+theta2+theta3~1),
#                  data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63, 3.6,0,0,1.4)), method="ML", verbose=TRUE, na.action=na.omit) #+gender+log(hdage_nobase)+SDMT+STROOP_INTERFERENCE
#(63,3.3,0,0,1.4)
#tms.nlme3<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3,  YEARS_TO_DIAG), fixed=list(theta1~1,  theta2~1+stdz_CAG+gender+stdz_CAG:gender, theta3~1) , random=pdDiag(theta1+theta2+theta3~1),
#                  data= newgrdata, groups=~SUBJID,  start=list(fixed=c(59,3.4,0,0,0,1.3)), method="ML",  verbose=TRUE, na.action=na.omit) #+gender+log(hdage_nobase)+SDMT+STROOP_INTERFERENCE
#tms.nlme1<-nlme(stdardized.TMS~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_CAG+stdz_SDMT+stdz_SC+stdz_SW+stdz_SI, theta3~1) , random=pdDiag(theta2~1),
#                data= newgrdata, groups=~SUBJID,  start=list(fixed=c(2.1,0.8,0,0,0,0,0,0.5)), method="ML",na.action=na.omit,verbose=TRUE, control = list(pnlsTol = 1e-1)) #
tms.nlme1<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_CAG+stdz_SDMT+stdz_SC+stdz_SW+stdz_SI+gender, theta3~1) , random=pdDiag(theta2~1),
data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63,2.5,2.1,2.1,2.1,2.1,2.1,1.2,1.2)), method="ML",na.action=na.omit,verbose=TRUE) #
#tms.nlme2<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_CAG+stdz_SDMT+stdz_SC+stdz_SW+stdz_SI+gender, theta3~1) , random=pdDiag(theta2~1),
#                 data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63,0.5,0.5,0.5,0.5,0.5,0.5,0.5,3.6)), method="ML",na.action=na.omit,verbose=TRUE) #
#tms.nlme1<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_bage+stdz_CAG+stdz_SDMT+stdz_SC+stdz_SW+stdz_SI+gender, theta3~1) , random=pdDiag(theta2~1),
#                data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63,3.9,0,0,0,0,0,0,0,3.5)), method="ML",na.action=na.omit,verbose=TRUE) #
#summary(tms.nlme1)
#tms.nlme2<-nlme(TOTAL_MOTOR_SCORE~logistf(theta1, theta2, theta3, logAGE), fixed=list(theta1~1,  theta2~1+stdz_bage+stdz_CAG+stdz_SDMT+stdz_SC+stdz_SW+stdz_SI+gender, theta3~1) , random=pdDiag(theta2~1),
#                data= newgrdata, groups=~SUBJID,  start=list(fixed=c(63,4.5,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1.5)), method="ML",na.action=na.omit,verbose=TRUE) #
# plot(newgrdata$logAGE[1:6], newgrdata$TOTAL_MOTOR_SCORE[1:6])
#(63,2.5,2.1,2.1,2.1,2.1,2.1,1.2)
#63,1.5,1.5,1.5,1.5,1.5,1.5,3.2
#63,1.1,1.1,1.1,1.1,1.1,1.1,1.1,3.2
#63,1.2,1.1,1.1,1.1,1.1,1.1,1.1,3.2
#summary(tms.nlme1)
#summary(tms.nlme2)
#63,0.8,0.8,0.8,0.8,0.8,0.8,0.8,1.8   # gender significant
#############################################
### Anova Test #
#############################################
#anova.test1<-anova(tms.nlme1, tms.nlme2, tms.nlme3)
#anova.test2<-anova(tms.nlme1, tms.nlme2)
#summary(anova.test2)
###################
### Fixed Effects #
###################
var.fixed1<-diag(tms.nlme1$varFix)
summary.fixed1<-summary(tms.nlme1)$tTable
#var.fixed2<-diag(tms.nlme2$varFix)
#summary.fixed2<-summary(tms.nlme2)$tTable
#var.fixed3<-diag(tms.nlme3$varFix)
#summary.fixed3<-summary(tms.nlme3)$tTable
#####################
##  scale parameter #
#####################
## within-individual
sig.randeff.nlme1<-as.numeric(VarCorr(tms.nlme1)["theta2.(Intercept)", "StdDev"])
#sig.randeff.nlme2<-VarCorr(tms.nlme2, sigma)
#sig.randeff.nlme3<-VarCorr(tms.nlme3, sigma)
###############################################################
## Extract Random effects with augmented data from groupedData#
###############################################################
randef1<-random.effects(tms.nlme1)
#randef2<-random.effects(tms.nlme2)
#randef3<-random.effects(tms.nlme3)
##################################################
## estimate inflection points (random effects)  ##
## estimate bias for inflection points          ##
##################################################
beta0.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.(Intercept)"]
beta1.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.stdz_CAG"]
beta2.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.stdz_SDMT"]
beta3.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.stdz_SC"]
beta4.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.stdz_SW"]
beta5.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.stdz_SI"]
beta6.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta2.gender"]
est.logT.nlme1<-beta0.nlme1+beta1.nlme1*as.vector(stdardized.CAG)+
beta2.nlme1*as.vector(stdardized.SDMT)+beta3.nlme1*as.vector(stdardized.SC)+beta4.nlme1*as.vector(stdardized.SW)+
beta5.nlme1*as.vector(stdardized.SI)+beta6.nlme1*base.cov[,"gender"]+randef1[,"theta2.(Intercept)"]  # estimated logT
#theta1.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta1"]
avr.logT.nlme1<-mean(est.logT.nlme1)
#theta3.nlme1<-summary(tms.nlme1)$tTable[,"Value"]["theta3"]
## prediction ft
num.ID<-unique(newgrdata[,"SUBJID"])
predage<-seq(3, 4, length=m)
para.pred <-matrix(100,nrow=length(predage), ncol=n,
dimnames=list(paste("visit",1:length(predage),sep=""),paste("ID",1:n,sep="")))
for(id in 1:n){
#rm(id); id<-1
subdata<-newgrdata[newgrdata[,"SUBJID"]==num.ID[id], ]
newage1<-data.frame(logAGE=predage,stdz_CAG=unique(subdata[,"stdz_CAG"]),stdz_SDMT=unique(subdata[,"stdz_SDMT"]),stdz_SC=unique(subdata[,"stdz_SC"]),
stdz_SW=unique(subdata[,"stdz_SW"]),stdz_SI=unique(subdata[,"stdz_SI"]), gender=unique(subdata[,"gender"]), SUBJID=num.ID[id])
pred.sub1<-predict(tms.nlme1, newage1, level=0:1)
para.pred[,id]<-pred.sub1[,"predict.fixed"]
}
avr.para.pred<-rowMeans(para.pred)
#plot(predage,   avr.para.pred)
##################################################
## estimate inflection points (random effects)  ##
## estimate bias for inflection points          ##
##################################################
#beta0.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.(Intercept)"]
#beta1.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.stdz_CAG"]
#beta2.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.stdz_SDMT"]
#beta3.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.stdz_SC"]
#beta4.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.stdz_SW"]
#beta5.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.stdz_SI"]
#beta6.nlme2<-summary(tms.nlme2)$tTable[,"Value"]["theta2.gender"]
#est.logT.nlme2<-beta0.nlme2+beta1.nlme2*as.vector(stdardized.CAG)+
#                beta2.nlme2*as.vector(stdardized.SDMT)+beta3.nlme2*as.vector(stdardized.SC)+beta4.nlme2*as.vector(stdardized.SW)+
#                beta5.nlme2*as.vector(stdardized.SI)+beta6.nlme2*base.cov[,"gender"]+randef2[,"theta2.(Intercept)"] # estimated logT
##################################################
## estimate inflection points (random effects)  ##
## estimate bias for inflection points          ##
##################################################
#beta0.nlme3<-summary(tms.nlme3)$tTable[,"Value"]["theta2.(Intercept)"]
#beta1.nlme3<-summary(tms.nlme3)$tTable[,"Value"]["theta2.stdz_CAG"]
#beta2.nlme3<-summary(tms.nlme3)$tTable[,"Value"]["theta2.gender"]
#beta3.nlme3<-summary(tms.nlme3)$tTable[,"Value"]["theta2.stdz_CAG:gender"]
#est.logT.nlme3<-beta0.nlme3+beta1.nlme3*stdardized.CAG+beta2.nlme3*base.cov[,"gender"]+beta3.nlme3*as.vector(stdardized.CAG)*base.cov[,"gender"]+randef3[,"theta2.(Intercept)"]  # estimated logT
#plot( augPred(tms.nlme1), level=0)
return(list(suborg=suborg, #anova.test1=anova.test1, #anova.test2=anova.test2,
var.fixed1=var.fixed1, # var.fixed2=var.fixed2, #var.fixed3=var.fixed3,
summary.fixed1=summary.fixed1, #summary.fixed2=summary.fixed2, #summary.fixed3=summary.fixed3,
## within-individual
sig.randeff.nlme1=sig.randeff.nlme1, #sig.randeff.nlme2=sig.randeff.nlme2,# sig.randeff.nlme3=sig.randeff.nlme3,
randef1=randef1,# randef2=randef2, #randef3=randef3,
est.logT.nlme1=est.logT.nlme1, avr.logT.nlme1=avr.logT.nlme1,  avr.para.pred=avr.para.pred )) #, est.logT.nlme2=est.logT.nlme2)) #, est.logT.nlme3=est.logT.nlme3))
}
data.analysis.nlme<-grouped.tms.data(file="data/gendat.csv", m=30)
#predage<-seq(3.5, 4.5, length=30)
#avr.logT.nlme<
how.many.early.diag<-function(n=80,data=data.analysis.nlme$suborg, estimation=data.analysis.nlme$est.logT.nlme1){
ages <-matrix(100,nrow=n, ncol=4,
dimnames=list(paste("ID",1:n,sep=""),
c("age_at_clinic_diag", "age_inflect_occur", "diff", "ind")))
est.infl.pts<-estimation
for(i in 1:80){
ages[i,1]<-unique(data[[i]]$logAGE[data[[i]]$YEARS_TO_DIAG==0])
ages[i,2]<-est.infl.pts[i]
ages[i,3]<-ages[i,1]-ages[i,2]
ind<-ifelse(ages[i,3]>=0, 1,0)
ages[i,4]<-ind
}
num.early.diag<-sum(ages[,"ind"])
return(list(ages=ages, num.early.diag=num.early.diag))
}
nlme1.early.diag<-how.many.early.diag(n=80,data=data.analysis.nlme$suborg,estimation=data.analysis.nlme$est.logT.nlme1)
#nlme2.early.diag<-how.many.early.diag(n=80,data=data.analysis.nlme$suborg,estimation=data.analysis.nlme$est.logT.nlme2)
#cbind(suborg[[1]]$logAGE, suborg[[1]]$YEARS_TO_DIAG)
## fixed effects summary
library(xtable)
combine.table1<-cbind(data.analysis.nlme$summary.fixed1[,"Value"],
data.analysis.nlme$summary.fixed1[,"Std.Error"],
#data.analysis.nlme$var.fixed1,
data.analysis.nlme$summary.fixed1[,"t-value"],
data.analysis.nlme$summary.fixed1[,"p-value"]
)
colnames(combine.table1)<-c("value", "Std.Error", "t-value", "p-value")
xtable(combine.table1, digits=3)
## standard errors
sigma1<-data.analysis.nlme$sig.randeff.nlme1
xlim <- c(-0.15, 0.2)
ylim <- c(0,63)
## Create a blank plot
plot(1,type="n", ylim=ylim, xlim=xlim,main="Motor Sign Decline", xlab="Difference logAges", ylab="Total Motor Score")#, cex.legend=3, lwd=2)
scam.upper.ci<- shch.results$tms.pred+(qnorm(0.975)*shch.results$tms.se.pred)
scam.lower.ci<- shch.results$tms.pred-(qnorm(0.975)*shch.results$tms.se.pred)
## unique subject ID's
for(i in 1:80){
lines(shch.results$scamfit.data[[i]][,3], shch.results$scamfit.data[[i]][,2], col="gray")
lines(shch.results$newlogS, shch.results$tms.pred, col="red", type="l", lty=1, lwd=2)
lines(shch.results$newlogS, scam.upper.ci, col="black", type="l", lty=3, lwd=2)
lines(shch.results$newlogS, scam.lower.ci, col="black", type="l", lty=3, lwd=2)
#lines(naiv.results$newlogS+naiv.results$zstar0[i], naiv.results$tms.pred, col="black", type="l")
}
#shch.results$global.T
##paraNLME
#para.logS<-seq(-0.1, 0.15, length=10)
#population.para<-data.frame(TMS=para.tms, logDiff=para.logS)
lines(shch.results$newlogS, data.analysis.nlme$avr.para.pred, col="blue", type="l", lty=1, lwd=2)
#lines(para.logS, para.tms, lwd=2, lty=5, col="green")
abline(v=shch.results$global.T, col="black",  lty=4, lwd=2)
library(ggplot2)
group<-1
aa<-list()
for (id in 1:80){
#aa[[id]]<-shch.results$pseudo.data[[id]]
aa[[id]]<-shch.results$scamfit.data[[id]]
aa[[id]]$person<-id
}
scam.predse<-shch.results$tms.se.pred
scam.lower.ci<- (qnorm(0.975)*shch.results$tms.se.pred)
### Shisfted Data
aa.gen<-do.call("rbind.data.frame",aa)
### Average TMS
population.pred<-data.frame(AGE=NA, TMS=shch.results$tms.pred, logDiff=shch.results$newlogS, fac1=NA, fac2=NA, fac=NA, person=NA, se=shch.results$tms.se.pred)
population.para<-data.frame(TMS=data.analysis.nlme$avr.para.pred, logDiff=shch.results$newlogS)
rm(p)
p<-ggplot(data=aa.gen, aes(x =logDiff, y = TMS, group = person))
p<-p+geom_line(color="lightgray", alpha=1)+
## spaghetti plot
stat_smooth(data=aa.gen, method="loess",aes(group=1,colour="blue"), fill="lightblue", linetype="solid", size=1,alpha=0.6)+ #, , se=FALSE, linetype="dashed")
stat_smooth(data=population.para, method="lm", aes(group=1,colour="orange"), linetype="dotdash")+
## scam smooth
geom_ribbon(data=population.pred, aes(ymin =TMS-qnorm(0.975)*se, ymax = TMS+qnorm(0.975)*se), fill = "lightpink", alpha=0.6)+
geom_line(data=population.pred, aes(x =logDiff, y =TMS, colour="red"), linetype="dashed", size=1, alpha=0.6)
size <- 15
dev.off()
p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
dev.off()
g<-p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
dev.off()
g<-p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
#ggsave("HDtrjectory.pdf",width=8,height=8)
ggsave(g, file="HDtrjectory.eps", device="eps", width=8,height=8)
library(Cairo)
install.packages("Cairo")
library(Cairo)
setHook(packageEvent("grDevices", "onLoad"),
function(...) grDevices::X11.options(type='cairo'))
options(device='x11')
g<-p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
group<-1
aa<-list()
for (id in 1:80){
#aa[[id]]<-shch.results$pseudo.data[[id]]
aa[[id]]<-shch.results$scamfit.data[[id]]
aa[[id]]$person<-id
}
scam.predse<-shch.results$tms.se.pred
scam.lower.ci<- (qnorm(0.975)*shch.results$tms.se.pred)
### Shisfted Data
aa.gen<-do.call("rbind.data.frame",aa)
### Average TMS
population.pred<-data.frame(AGE=NA, TMS=shch.results$tms.pred, logDiff=shch.results$newlogS, fac1=NA, fac2=NA, fac=NA, person=NA, se=shch.results$tms.se.pred)
population.para<-data.frame(TMS=data.analysis.nlme$avr.para.pred, logDiff=shch.results$newlogS)
rm(p)
## ggplot
p<-ggplot(data=aa.gen, aes(x =logDiff, y = TMS, group = person))
p<-p+geom_line(color="lightgray", alpha=1)+
## spaghetti plot
stat_smooth(data=aa.gen, method="loess",aes(group=1,colour="blue"), fill="lightblue", linetype="solid", size=1,alpha=0.6)+ #, , se=FALSE, linetype="dashed")
stat_smooth(data=population.para, method="lm", aes(group=1,colour="orange"), linetype="dotdash")+
## scam smooth
geom_ribbon(data=population.pred, aes(ymin =TMS-qnorm(0.975)*se, ymax = TMS+qnorm(0.975)*se), fill = "lightpink", alpha=0.6)+
geom_line(data=population.pred, aes(x =logDiff, y =TMS, colour="red"), linetype="dashed", size=1, alpha=0.6)
## simple spaghetti plot
#pdf(file="new_trajectory.pdf")
#pdf(file="new_tranjectory", width=8, heigh=6)
size <- 15
g<-p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
dev.off()
g<-p +geom_vline(aes(xintercept=shch.results$global.T),  linetype="dashed")+#+geom_vline(aes(xintercept=shch.results$global.T,  linetype="Inflection Point"))+ #, show_legend = TRUE
scale_colour_manual(name="Method", values=c( "blue", "orange", "red"),labels =c("Lowess", "ParaNLME" ,"Multi-Stage Nonparametric Method"))+
scale_linetype_manual(values=c("solid", "dotdash", "dashed" ))+
guides(color=guide_legend(override.aes=list(linetype=c("solid","dotdash","dashed"), fill=NA)))+
xlab("Shifted logAges") +
ylab("Total Motor Score") +
ggtitle("Motor Sign Decline")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),
#panel.background = element_rect(fill = "NA"),#panel.grid.minor=element_blank(),
#title="Motor-Sign Decline",
axis.text.x=element_text(size=size),
axis.text.y=element_text(size=size),
axis.title.x=element_text(size=size),
axis.title.y=element_text(size=size,angle=90),
plot.title=element_text(size=15,hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(colour = 'black', angle = 0, size = 12), #hjust = 3, vjust = 3, face = 'bold')
legend.position = c(.996, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
g
#ggsave("HDtrjectory.pdf",width=8,height=8)
ggsave(g, file="HDtrjectory.eps", device="eps", width=8,height=8)
update.pacakges(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
g
#ggsave("HDtrjectory.pdf",width=8,height=8)
ggsave(g, file="HDtrjectory.eps", device="eps", width=8,height=8)
